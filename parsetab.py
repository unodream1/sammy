
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSAND DIVIDE END EQUALS FALSE LPAREN MINUS NAME NUMBER OR PLUS RPAREN STRING TIMES TRUEstatement : NAME EQUALS expression ENDexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression AND expression\n                  | expression OR expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : STRINGexpression : NUMBERexpression : TRUEexpression : FALSEexpression : NAME'
    
_lr_action_items = {'NAME':([0,3,6,7,13,14,15,16,17,18,],[2,4,4,4,4,4,4,4,4,4,]),'$end':([1,12,],[0,-1,]),'EQUALS':([2,],[3,]),'MINUS':([3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,],[6,-14,14,6,6,-10,-11,-12,-13,6,6,6,6,6,6,-8,14,-2,-3,-4,-5,14,14,-9,]),'LPAREN':([3,6,7,13,14,15,16,17,18,],[7,7,7,7,7,7,7,7,7,]),'STRING':([3,6,7,13,14,15,16,17,18,],[8,8,8,8,8,8,8,8,8,]),'NUMBER':([3,6,7,13,14,15,16,17,18,],[9,9,9,9,9,9,9,9,9,]),'TRUE':([3,6,7,13,14,15,16,17,18,],[10,10,10,10,10,10,10,10,10,]),'FALSE':([3,6,7,13,14,15,16,17,18,],[11,11,11,11,11,11,11,11,11,]),'END':([4,5,8,9,10,11,19,21,22,23,24,25,26,27,],[-14,12,-10,-11,-12,-13,-8,-2,-3,-4,-5,-6,-7,-9,]),'PLUS':([4,5,8,9,10,11,19,20,21,22,23,24,25,26,27,],[-14,13,-10,-11,-12,-13,-8,13,-2,-3,-4,-5,13,13,-9,]),'TIMES':([4,5,8,9,10,11,19,20,21,22,23,24,25,26,27,],[-14,15,-10,-11,-12,-13,-8,15,15,15,-4,-5,15,15,-9,]),'DIVIDE':([4,5,8,9,10,11,19,20,21,22,23,24,25,26,27,],[-14,16,-10,-11,-12,-13,-8,16,16,16,-4,-5,16,16,-9,]),'AND':([4,5,8,9,10,11,19,20,21,22,23,24,25,26,27,],[-14,17,-10,-11,-12,-13,-8,17,-2,-3,-4,-5,17,17,-9,]),'OR':([4,5,8,9,10,11,19,20,21,22,23,24,25,26,27,],[-14,18,-10,-11,-12,-13,-8,18,-2,-3,-4,-5,18,18,-9,]),'RPAREN':([4,8,9,10,11,19,20,21,22,23,24,25,26,27,],[-14,-10,-11,-12,-13,-8,27,-2,-3,-4,-5,-6,-7,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([3,6,7,13,14,15,16,17,18,],[5,19,20,21,22,23,24,25,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression END','statement',4,'p_statement_single','parser.py',16),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',22),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',23),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',24),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',25),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',26),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',27),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',37),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',42),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',47),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',52),
  ('expression -> TRUE','expression',1,'p_expression_true','parser.py',57),
  ('expression -> FALSE','expression',1,'p_expression_false','parser.py',62),
  ('expression -> NAME','expression',1,'p_expression_name','parser.py',67),
]
